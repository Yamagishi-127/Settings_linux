version: "3" # docker-composeのバージョンを指定 (docker-composeのバージョンは、docker-compose versionで確認できる)公式から非推奨されている2系は、3系に比べて、volumeの扱いが異なるので注意。
service:
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_PORT: 3305 # デフォルトは3306
    ports: -3305:3305 # デフォルトは3306:3306
    valumes:
      - ./usr/rails/mysql/conf:/etc/mysql/conf.d:rw # Composefileからみた相対パスでmysql/confが呼び出されたら、etc/mysql/conf.dを使ってrw(読み込み・書き込み)を行う。実際は、再ビルド後も、DBの中身がリセットされないようにしてる。
      - ./mysql-datavolume:/var/lib/mysql # Composefileからみた相対パスでmysql-datavolumeが呼び出されたら、/var/lib/mysqlを指定して実行
      - "bundle:/usr/local/bundle" # Composefileからみた相対パスでbundleが呼び出されたら、ローカルのbundleファイルを指定して実行。これにより、ローカルで実行したbundle installの内容が永続化(=変更内容の適用)される。
  web:
    build: .
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/myapp
    ports:
      - "3000:3000"
    depends_on:
      - db # ここで指定したServiceは、`docker-compose run`した際に、指定元のServiceが実行されるよりも前に呼び出されるようになる。つまり、webというServiceよりも前に、dbというサービスが実行される。
  frontend:
    depends_on:
      - db
    ports:
      - "8200:8200"
    entrypoint: "/bin/sh -c 'npm install && npm run start'" # この記述によって、フロントエンドのフレームワーク最大の恩恵であるlive loadがdockerでも使える。ただし、このComposeFileでentrypointを指定すると、Dockerfile内のCMDやENTRYPOINTは無視されるので注意。
volumes: # このようにトップレベルでvolumesを指定すると、名前付きボリュームになる。
  bundle:
    driver: local # bundleを使う際のdriverとしてlocalを指定
  mysql-datavolume:
# docker-compose.ymlの内容を記述したら、docker-compose buildを実行して、イメージをビルドする。

# 実行コマンドは、docker-compose up -d
# docker-compose up -dを実行すると、docker-compose.ymlの内容に従って、イメージのビルド、コンテナの作成、コンテナの起動が行われる。
